<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:local="*" xmlns:model="ru.koldoon.model.*" xmlns:mx="library://ns.adobe.com/flex/mx"
                       backgroundAlpha="0" showStatusBar="false" frameRate="60"
                       width="1400" height="930" minWidth="1210" minHeight="670"

                       addedToStage="addedToStageHandler(event)">


    <fx:Style source="/ru/koldoon/resources/css/application.css"/>

    <fx:Declarations>
        <model:LoggerSocketServer id="loggerSocketServer"
                                  messageRecieved="loggerSocketServer_messageRecievedHandler(event)"
                                  clientConnected="loggerSocketServer_clientConnectedHandler(event)"/>

        <s:ArrayCollection id="logCollection" collectionChange="logCollection_collectionChangeHandler(event)"/>
        <s:ArrayCollection id="currentlyExecutingCollection"/>
        <s:ArrayCollection id="applicationContextCollection"/>

        <local:uint id="callsNumber"/>
        <local:uint id="resultsNumber"/>
        <local:uint id="errorsNumber"/>
    </fx:Declarations>

    <s:Image source="{getBackgroundClass(Settings.getInstance().backgroundType)}" scaleMode="stretch" smooth="true"
             visible="{!Settings.getInstance().transparencyEnabled}"
             top="20" right="20" bottom="20" left="20" mask="{imageMask}">
        <s:showEffect>
            <s:Fade alphaFrom="0" alphaTo="1" duration="300"/>
        </s:showEffect>
        <s:hideEffect>
            <s:Fade alphaFrom="1" alphaTo="0" duration="300"/>
        </s:hideEffect>
        <s:filters>
            <s:DropShadowFilter distance="0" blurX="18" blurY="18" quality="3"/>
        </s:filters>
    </s:Image>
    <s:Group id="imageMask" top="20" right="20" bottom="20" left="20">
        <s:Rect width="100%" height="100%" radiusY="4" radiusX="4">
            <s:fill>
                <s:SolidColor color="0xffffff"/>
            </s:fill>
        </s:Rect>
    </s:Group>

    <s:VGroup top="22" right="22" bottom="22" left="22">
        <s:BorderContainer id="headerContainer" borderColor="0x878787" backgroundColor="0x878787" backgroundAlpha="0.15" borderAlpha="0.25"
                           mouseDown="{ stage.nativeWindow.startMove(); }" width="100%" cornerRadius="2">
            <s:layout>
                <s:HorizontalLayout paddingLeft="5" paddingRight="5" verticalAlign="middle" gap="15"/>
            </s:layout>

            <s:Group>
                <s:Rect width="20" height="18" radiusX="1" radiusY="1">
                    <s:fill>
                        <s:SolidColor color="black" alpha="0.2"/>
                    </s:fill>
                </s:Rect>
                <s:BitmapImage source="{APP_ICON}" verticalCenter="0" horizontalCenter="0"/>
            </s:Group>
            <s:Label text="Flex Log Viewer" toolTip="Flex Log Viewer by Vadim Usoltsev, 2014"/>

            <s:Spacer width="60"/>
            <s:Label text="Total events presented: {logCollection.length}" color="0xbed5ff"/>

            <s:Label text="Calls: {callsNumber}" color="0xffee82" alpha="{ callsNumber > 0 ? 1 : 0.4 }"
                     toolTip="Number of server calls executed"/>

            <s:Label text="Results: {resultsNumber}" color="0x81ff7d" alpha="{ resultsNumber > 0 ? 1 : 0.4 }"
                     toolTip="Number of command results processed"/>

            <s:Label text="Errors: {errorsNumber}" color="0xff6d5a" alpha="{ errorsNumber > 0 ? 1 : 0.4 }"
                     toolTip="Number of Errors captured"/>


            <s:Spacer width="60"/>
            <s:Label text="autoscroll" buttonMode="true"
                     toolTip="Toggle autoscroll to the end when new item is recieved"
                     alpha="{ Settings.getInstance().autoScrollEnabled ? 1 : 0.4 }"
                     click="{ Settings.getInstance().autoScrollEnabled = !Settings.getInstance().autoScrollEnabled; }"/>

            <s:Label text="transparency" buttonMode="true"
                     alpha="{ Settings.getInstance().transparencyEnabled ? 1 : 0.4 }"
                     click="{ Settings.getInstance().transparencyEnabled = !Settings.getInstance().transparencyEnabled; }"
                     toolTip="Remove background image and make application transparent"/>

            <s:Label text="smooth scrolling" buttonMode="true"
                     toolTip="Smoothing when autoscrolling the list"
                     alpha="{ Settings.getInstance().smoothScrollingEnabled ? 1 : 0.4 }"
                     click="{ Settings.getInstance().smoothScrollingEnabled = !Settings.getInstance().smoothScrollingEnabled; }"/>


            <s:Spacer width="60"/>
            <s:HGroup>
                <s:Label text="black" buttonMode="true"
                         alpha="{ Settings.getInstance().backgroundType == Settings.BACKGROUND_TYPE_BLACK ? 1 : 0.4 }"
                         click="{ Settings.getInstance().backgroundType = Settings.BACKGROUND_TYPE_BLACK; }"
                         toolTip="Set black background"/>

                <s:Label text="|" alpha="0.6"/>

                <s:Label text="blue" buttonMode="true"
                         alpha="{ Settings.getInstance().backgroundType == Settings.BACKGROUND_TYPE_BLUE ? 1 : 0.4 }"
                         click="{ Settings.getInstance().backgroundType = Settings.BACKGROUND_TYPE_BLUE; }"
                         toolTip="Set blue background"/>
            </s:HGroup>

            <s:Spacer width="100%"/>
            <s:Label text="&#x2022;&#x2190;&#x2022;" fontFamily="consolas" fontSize="16" toolTip="Active client connection"
                     visible="{ loggerSocketServer.activeConnection }"/>
            <s:HGroup gap="4" paddingBottom="1">
                <s:Label text="[-]" buttonMode="true" fontFamily="consolas" fontSize="14"
                         click="minimize_clickHandler(event)" toolTip="Minimize the window"/>
                <s:Label text="[x]" buttonMode="true" fontFamily="consolas" fontSize="14"
                         click="closeButton_clickHandler(event)" toolTip="Close application"/>
            </s:HGroup>
        </s:BorderContainer>

        <s:BorderContainer width="100%" height="100%" cornerRadius="2"
                           backgroundColor="0x3d5164" borderColor="0x3d5164"
                           backgroundAlpha="0.1" borderAlpha="0.2">

            <mx:VDividedBox width="100%" left="5" right="5" bottom="5" top="5" dividerAlpha="0.5">
                <s:BorderContainer width="100%" height="70%" backgroundAlpha="0" borderAlpha="0">
                    <s:layout>
                        <s:VerticalLayout/>
                    </s:layout>

                    <s:List id="messagesList" width="100%" height="100%"
                            contentBackgroundAlpha="0" borderVisible="false" useVirtualLayout="true"
                            borderAlpha="0" contentBackgroundColor="0" itemRenderer="ru.koldoon.view.renderers.LogItemRenderer"
                            skinClass="ru.koldoon.resources.skins.list.ListTransparentSkin" horizontalScrollPolicy="off"
                            dataProvider="{logCollection}"/>

                    <s:BorderContainer id="filterContainer" width="100%" cornerRadius="2"
                                       backgroundColor="0x0" borderColor="0x0"
                                       backgroundAlpha="0.2" borderAlpha="0.3">
                        <s:layout>
                            <s:HorizontalLayout paddingBottom="5" paddingTop="5" paddingLeft="10" paddingRight="10"
                                                verticalAlign="baseline"/>
                        </s:layout>
                        <s:Label text="Filter:"/>
                        <s:TextInput id="filterInput" color="white" widthInChars="40" fontFamily="consolas" fontSize="13"
                                     borderAlpha="0.11" borderColor="white" contentBackgroundColor="white" contentBackgroundAlpha="0.07"
                                     enter="goButton_clickHandler(event)"/>
                        <s:Label text="[ Go ]" buttonMode="true" paddingLeft="10" click="goButton_clickHandler(event)"/>
                    </s:BorderContainer>
                </s:BorderContainer>
                <mx:HDividedBox id="bottomContainer" width="100%" height="30%" dividerAlpha="0.5" minHeight="80">
                    <!-- Details -->
                    <s:BorderContainer id="detailsContainer" width="70%" height="100%" minWidth="200" cornerRadius="2"
                                       backgroundColor="0x0" borderColor="0x0"
                                       backgroundAlpha="0.2" borderAlpha="0.3">
                        <s:layout>
                            <s:VerticalLayout paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5"/>
                        </s:layout>
                        <s:Group width="100%">
                            <s:Label text="Details" horizontalCenter="0"/>
                            <s:HGroup right="5" gap="15">
                                <s:Label text="word wrap" buttonMode="true" toolTip="Wrap long lines in Details"
                                         alpha="{ Settings.getInstance().wordWrapEnabled ? 1 : 0.4 }"
                                         click="{ Settings.getInstance().wordWrapEnabled = !Settings.getInstance().wordWrapEnabled; }"/>
                                <s:Label text="copy to clipboard" buttonMode="true" click="copyToClipboard_clickHandler(event)"
                                         toolTip="Copy whole Details content to the clipboard"/>
                            </s:HGroup>
                        </s:Group>
                        <s:TextArea id="messageDetails" width="100%" height="100%" cachePolicy="on" editable="false"
                                    paddingLeft="0" paddingRight="0" color="white" fontSize="12" fontFamily="consolas"
                                    contentBackgroundAlpha="0" borderVisible="false" focusThickness="0"
                                    horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
                                    lineBreak="{ Settings.getInstance().wordWrapEnabled ? 'toFit' : 'explicit' }"
                                    text="{ LogItem(messagesList.selectedItem).message }"/>
                    </s:BorderContainer>

                    <!-- Currently executing & Application context -->
                    <s:BorderContainer id="contextContainer" width="350" minWidth="280" height="100%" cornerRadius="2"
                                       backgroundColor="0x0" borderColor="0x0"
                                       backgroundAlpha="0.2" borderAlpha="0.3">
                        <s:layout>
                            <s:VerticalLayout paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5"/>
                        </s:layout>

                        <s:HGroup width="100%" horizontalAlign="center">
                            <s:Label text="Currently executing" buttonMode="true"
                                     toolTip="List of currently executing commands"
                                     alpha="{ objectsViewStack.selectedChild == executingContent ? 1 : 0.4 }"
                                     click="{ objectsViewStack.selectedChild = executingContent }"/>

                            <s:Label text="|" alpha="0.6"/>

                            <s:Label text="Application context" buttonMode="true"
                                     toolTip="List of instantiated objects within Parsley context"
                                     alpha="{ objectsViewStack.selectedChild == contextContent ? 1 : 0.4 }"
                                     click="{ objectsViewStack.selectedChild = contextContent }"/>
                        </s:HGroup>

                        <mx:ViewStack id="objectsViewStack" width="100%" height="100%">
                            <s:NavigatorContent id="executingContent" width="100%" height="100%">
                                <s:List id="currentlyExecutingList" width="100%" height="100%"
                                        skinClass="ru.koldoon.resources.skins.list.ListTransparentSkin" horizontalScrollPolicy="off"
                                        itemRenderer="ru.koldoon.view.renderers.SimpleStringRenderer"
                                        dataProvider="{currentlyExecutingCollection}"/>
                            </s:NavigatorContent>
                            <s:NavigatorContent id="contextContent" width="100%" height="100%">
                                <s:layout>
                                    <s:VerticalLayout gap="5" horizontalAlign="right"/>
                                </s:layout>
                                <s:List id="applicationContextList" width="100%" height="100%"
                                        skinClass="ru.koldoon.resources.skins.list.ListTransparentSkin" horizontalScrollPolicy="off"
                                        itemRenderer="ru.koldoon.view.renderers.SimpleStringRenderer"
                                        dataProvider="{applicationContextCollection}"/>
                                <s:Label text="clear" alpha="0.5" buttonMode="true"
                                         click="applicationContextClear_clickHandler(event)"
                                         toolTip="Clear current context info data in case of watching further differences only"/>
                            </s:NavigatorContent>
                        </mx:ViewStack>
                    </s:BorderContainer>
                </mx:HDividedBox>
            </mx:VDividedBox>
        </s:BorderContainer>
    </s:VGroup>

    <s:Group id="resizeHandler" right="21" bottom="21" width="15" height="15" mouseDown="resizeHandler_clickHandler(event)"
             buttonMode="true">
        <s:Path data="M 4 13 L 13 4 L 13 13 L 4 13">
            <s:fill>
                <s:SolidColor color="0xffffff" alpha="0.6"/>
            </s:fill>
        </s:Path>
    </s:Group>

    <fx:Script><![CDATA[
        import com.greensock.TweenLite;
        import com.greensock.TweenMax;

        import mx.events.CollectionEvent;
        import mx.events.FlexEvent;

        import ru.koldoon.model.LogEvent;
        import ru.koldoon.model.LogItem;
        import ru.koldoon.model.Settings;

        [Embed(source="/ru/koldoon/resources/icons/ActivityMonitor16.png")]
        private static const APP_ICON:Class;

        [Embed(source="/ru/koldoon/resources/icons/close_window.png")]
        private static const CLOSE_ICON:Class;

        [Embed(source="/ru/koldoon/resources/icons/minimize_window.png")]
        private static const MINIMIZE_ICON:Class;

        [Embed(source="/ru/koldoon/resources/images/leather_vintage_textures.jpg")]
        private static const BACKGROUND_BLACK:Class;

        [Embed(source="/ru/koldoon/resources/images/aero-blue-abstract-wallpaper.jpg")]
        private static const BACKGROUND_BLUE:Class;


        private var currentlyExecutingMap:Object = { };
        private var applicationContextMap:Object = { };
        private var lastErrorItemIndex:int = -1;

        private function closeButton_clickHandler(event:MouseEvent):void
        {
            TweenLite.to(this, 0.5,
                    {
                        alpha:      0,
                        onComplete: function ():void
                        {
                            NativeWindow(stage.nativeWindow).close();
                        }
                    });
        }

        private function loggerSocketServer_messageRecievedHandler(event:LogEvent):void
        {
            processLogMessage(event.logItem);
        }

        private function processLogMessage(msg:LogItem):void
        {
            if (msg.key != "EXECUTE" && msg.key != "DESTROY"
                    && msg.category.indexOf("org.spicefactory.parsley.core.lifecycle") == -1)
            {
                logCollection.addItem(msg);
            }
            else
            {
                var objName:String;
                if (msg.lineMessage.indexOf("Configure managed object with [ObjectDefinition(type") != -1)
                {
                    objName = getObjectName(msg.lineMessage);
                    if (applicationContextMap[objName])
                    {
                        applicationContextMap[objName]++;
                    }
                    else
                    {
                        applicationContextMap[objName] = 1;
                    }
                }
                else if (msg.lineMessage.indexOf("Destroy managed object with [ObjectDefinition(type") != -1)
                {
                    objName = getObjectName(msg.lineMessage);
                    if (applicationContextMap[objName])
                    {
                        applicationContextMap[objName]--;
                    }
                    else
                    {
                        applicationContextMap[objName] = 0;
                    }
                }
                updateContextCollection();
            }

            if (msg.key == "CALL")
            {
                callsNumber++;
            }
            else if (msg.key == "RESULT")
            {
                resultsNumber++;
            }
            else if (msg.key == "ERROR")
            {
                lastErrorItemIndex = logCollection.length - 1;
                stage.nativeWindow.orderToFront();
                stage.nativeWindow.notifyUser("New error captured.");
                errorsNumber++;
            }
            else if (msg.key == "EXECUTE")
            {
                currentlyExecutingMap[msg.message] = true;
                updateExecutingCollection();
            }
            else if (msg.key == "DESTROY")
            {
                currentlyExecutingMap[msg.message] = false;
                updateExecutingCollection();
            }
        }

        private static function getObjectName(msg:String):String
        {
            var className:String = msg.split("[ObjectDefinition(type = ")[1].split(",")[0];
            return className.split("::").pop();
        }

        private function updateExecutingCollection():void
        {
            var executingList:Array = [];
            for (var commandName:String in currentlyExecutingMap)
            {
                if (currentlyExecutingMap[commandName])
                {
                    executingList.push(commandName);
                }
            }

            currentlyExecutingCollection.source = executingList;
        }

        private function updateContextCollection():void
        {
            var contextList:Array = [];
            for (var objectName:String in applicationContextMap)
            {
                if (applicationContextMap[objectName])
                {
                    contextList.push(objectName);
                }
            }

            contextList.sort();
            applicationContextCollection.source = contextList;
        }

        private function logCollection_collectionChangeHandler(event:CollectionEvent = null):void
        {
            if (!Settings.getInstance().autoScrollEnabled || !messagesList || !messagesList.scroller || !messagesList.scroller.verticalScrollBar)
                return;

            if (lastErrorItemIndex >= 0)
            {
                Settings.getInstance().autoScrollEnabled = false;
                messagesList.addEventListener(FlexEvent.UPDATE_COMPLETE, scrollToError);
            }
            else
            {
                messagesList.addEventListener(FlexEvent.UPDATE_COMPLETE, scrollDown);
            }
        }

        private function scrollToError(event:Event = null):void
        {
            messagesList.removeEventListener(FlexEvent.UPDATE_COMPLETE, scrollToError);

            messagesList.selectedIndex = lastErrorItemIndex;
            messagesList.ensureIndexIsVisible(lastErrorItemIndex);
            lastErrorItemIndex = -1;
        }

        private function scrollDown(event:Event = null):void
        {
            messagesList.removeEventListener(FlexEvent.UPDATE_COMPLETE, scrollDown);

            if (Settings.getInstance().smoothScrollingEnabled)
            {
                TweenMax.to(messagesList.scroller.verticalScrollBar, 0.4,
                        {
                            delay: 0.2,
                            value: messagesList.scroller.verticalScrollBar.maximum
                        });
            }
            else
            {
                messagesList.scroller.verticalScrollBar.value = messagesList.scroller.verticalScrollBar.maximum;
            }
        }

        private function resizeHandler_clickHandler(event:MouseEvent):void
        {
            stage.nativeWindow.startResize(NativeWindowResize.BOTTOM_RIGHT);
        }

        private function loggerSocketServer_clientConnectedHandler(event:Event):void
        {
            applicationContextMap = { };
            currentlyExecutingMap = { };
            updateContextCollection();
            updateExecutingCollection();
            logCollection.removeAll();
            callsNumber = 0;
            resultsNumber = 0;
            errorsNumber = 0;
        }

        private function minimize_clickHandler(event:MouseEvent):void
        {
            stage.nativeWindow.minimize()
        }

        private function copyToClipboard_clickHandler(event:MouseEvent):void
        {
            try
            {
                System.setClipboard(messageDetails.text);
            }
            catch (err:Error)
            { }
        }


        private var windowProperties:Rectangle = new Rectangle();

        private function closeHandler(event:Event):void
        {
            Settings.getInstance().windowProperies = windowProperties;
            Settings.getInstance().contextViewProperties =
                    new Rectangle(0, 0, contextContainer.width, bottomContainer.height);
        }

        private function addedToStageHandler(event:Event):void
        {
            stage.nativeWindow.addEventListener(Event.CLOSE, closeHandler);
            stage.nativeWindow.addEventListener(NativeWindowBoundsEvent.MOVE, nativeWindow_moveHandler);
            stage.nativeWindow.addEventListener(NativeWindowBoundsEvent.RESIZE, nativeWindow_resizeHandler);

            // restore position
            var properties:Rectangle = Settings.getInstance().windowProperies;
            stage.nativeWindow.x = properties.x;
            stage.nativeWindow.y = properties.y;
            stage.nativeWindow.width = properties.width;
            stage.nativeWindow.height = properties.height;

            var contextViewProperties:Rectangle = Settings.getInstance().contextViewProperties;
            contextContainer.width = contextViewProperties.width;
            bottomContainer.height = contextViewProperties.height;
        }

        private function nativeWindow_moveHandler(event:NativeWindowBoundsEvent = null):void
        {
            windowProperties.x = stage.nativeWindow.x;
            windowProperties.y = stage.nativeWindow.y;
        }

        private function nativeWindow_resizeHandler(event:NativeWindowBoundsEvent):void
        {
            windowProperties.width = stage.nativeWindow.width;
            windowProperties.height = stage.nativeWindow.height;
        }

        private function goButton_clickHandler(event:Event):void
        {
            if (filterInput.text && filterInput.text.length > 0)
            {
                var filterText:String = filterInput.text.toLowerCase();

                logCollection.filterFunction =
                        function (item:LogItem):Boolean
                        {
                            return item.lineMessage && item.lineMessage.toLowerCase().indexOf(filterText) != -1;
                        }
            }
            else
            {
                logCollection.filterFunction = null;
            }

            logCollection.refresh();
        }

        private function applicationContextClear_clickHandler(event:MouseEvent):void
        {
            applicationContextMap = { };
            updateContextCollection();
        }

        private static function getBackgroundClass(backgroundType:String):Class
        {
            return backgroundType == Settings.BACKGROUND_TYPE_BLACK
                    ? BACKGROUND_BLACK
                    : BACKGROUND_BLUE;
        }
        ]]></fx:Script>
</s:WindowedApplication>
