<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             creationComplete="creationCompleteHandler(event)">

    <fx:Metadata>
        [HostComponent("spark.components.Scroller")]
    </fx:Metadata>

    <fx:Script>
    <![CDATA[
        import com.greensock.TweenLite;

        import mx.events.FlexEvent;

        /**
         *  @private
         */
        override public function beginHighlightBitmapCapture():Boolean {
            var needUpdate:Boolean = super.beginHighlightBitmapCapture();

            // Draw an opaque rect that fill our entire skin. Our background
            // is transparent, but we don't want focus/error skins to
            // poke through.  This is safe to do since we don't have any 
            // graphic elements as direct children.
            graphics.beginFill(0);
            graphics.drawRect(0, 0, width, height);
            graphics.endFill();

            return needUpdate;
        }


        /**
         *  @private
         */
        override public function endHighlightBitmapCapture():Boolean {
            var needUpdate:Boolean = super.endHighlightBitmapCapture();

            // Clear the rect we drew in beginBitmapCapture();
            graphics.clear();

            return needUpdate;
        }


        private function creationCompleteHandler(event:FlexEvent):void {
            this.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler, false, 0, true);
            this.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler, false, 0, true);
            this.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
        }


        private var mouseIsOver:Boolean;


        private function mouseOverHandler(event:MouseEvent):void {
            mouseIsOver = true;
            TweenLite.to(verticalScrollBar, 0.5, {alpha: 1});
            TweenLite.to(horizontalScrollBar, 0.5, {alpha: 1});
        }


        private function mouseOutHandler(event:MouseEvent = null):void {
            // Когда водишь мышой по элементам листа, но иногда возникает неприятное мерцание
            // скроллера. Задержка сделана чтобы исключить это.
            mouseIsOver = false;
            TweenLite.to(this, 0.4, {
                onComplete: function ():void {
                    if (!mouseIsOver) {
                        TweenLite.to(verticalScrollBar, 0.5, {alpha: 0});
                        TweenLite.to(horizontalScrollBar, 0.5, {alpha: 0});
                    }
                }
            });
        }


        private function mouseDownHandler(event:MouseEvent):void {
            this.removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, stage_mouseUpHandler, false, 0, true);
        }


        private function stage_mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_UP, stage_mouseUpHandler);
            this.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler, false, 0, true);

            if (event.target != this) {
                mouseOutHandler();
            }
        }
        ]]>
    </fx:Script>

    <s:VScrollBar id="verticalScrollBar" visible="false" alpha="0"
                  skinClass="ru.koldoon.resources.skins.scroller.VScrollBarLightSkin"/>

    <s:HScrollBar id="horizontalScrollBar" visible="false" alpha="0"
                  skinClass="ru.koldoon.resources.skins.scroller.HScrollBarLightSkin"/>
</s:SparkSkin>